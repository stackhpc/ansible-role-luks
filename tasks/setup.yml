---
# tasks file for luks
- import_tasks: install.yml
  tags: install
  when: luks_install_dependencies

- include_tasks: keysetup.yml
  vars:
    # replaces all slashes with dashes and strips the leading /
    keysetup_keyname: "{{ item | luks_key }}"
    keysetup_directory: "{{ luks_keys_path }}"
    keysetup_action: "{{ 'copy' if 'keyfile' in item else 'generate' }}"
    keysetup_src: "{{ item.keyfile if 'keyfile' in item else '' }}"
    mode: "{{ item | luks_mode }}"
    dd: dd bs=512 count=4 if=/dev/random of={{ keysetup_directory }}/{{ keysetup_keyname }} iflag=fullblock
    # Old verisons of clevis have issues with long keys / some characters
    # See: https://github.com/latchset/clevis/issues/97
    tr: |-
      set -o pipefail
      head /dev/random | tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 16 > {{ keysetup_directory }}/{{ keysetup_keyname }}
    keysetup_cmd: "{{ dd if mode == 'keyfile' else tr }}"
  with_items: "{{ luks_devices }}"
  tags: key-setup

- name: Create the luks device
  vars:
    compat: "{{ ansible_version.full is version('2.8.0', '<') }}"
  include_tasks: "{{ 'create-compat.yml' if compat else 'create.yml' }}"

- name: Setup tang devices
  include_tasks: tang.yml
  when: item | luks_mode == "tang"
  with_items: "{{ luks_devices }}"

- name: Setup tpm2 devices
  include_tasks: tpm2.yml
  when: item | luks_mode == "tpm2"
  with_items: "{{ luks_devices }}"

- name: Construct crypttab options
  set_fact:
    luks_options: "{{ luks_options|default({}) | combine( {item.name: (item.options | default(['_netdev'] if item.mode == 'tang' else []) | join(','))}) }}"
  with_items: "{{ luks_devices }}"
  when: "'options' in {{ item }} or item.mode == 'tang'"

- name: Add the device to crypttab
  vars:
    keypath: "{{ item | luks_keypath }}"
    mode: "{{ item | luks_mode }}"
  crypttab:
    password: "{{ keypath if mode == 'keyfile' else 'none' }}"
    opts: "{{ luks_options[item.name] | default(omit) }}"
    backing_device: "{{ item.device }}"
    name: "{{ item.name }}"
    state: present
  become: true
  with_items: "{{ luks_devices }}"

- name: Escape device names
  systemd_escape:
    strings: "{{ luks_devices | map(attribute='name') | list }}"
  register: systemd_escape

- name: Setup devices
  systemd:
    daemon_reload: true
    state: started
    name: systemd-cryptsetup@{{ systemd_escape.escaped[item.name] }}.service
  with_items: "{{ luks_devices }}"
  when: item | luks_mode == "keyfile"
  become: true
  tags: skip_when_testing_docker

- name: Ensure keys collection directory exists on localhost
  file:
    path: "{{ luks_key_collection_path }}/{{ inventory_hostname }}"
    state: directory
    mode: "0700"
  when: luks_key_collection_path | default(false, true)
  delegate_to: localhost

- name: Check to see if key exists
  stat:
    path: "{{ luks_keys_path }}"
  register: luks_key_path_result

- name: Collect keys
  synchronize:
    mode: pull
    src: "{{ luks_keys_path }}/"
    dest: "{{ luks_key_collection_path }}/{{ inventory_hostname }}/"
    archive: false
    recursive: true
    # Updating times causes ansible to report a change
    times: true
  become: true
  when: 
    - luks_key_collection_path | default(false, true)
    - luks_key_path_result.stat.isdir is defined and luks_key_path_result.stat.isdir

- name: Delete keys on remote machine
  scrub:
    path: "{{ item | luks_keypath }}"
  become: true
  when:
    - item | luks_mode != "keyfile"
  with_items: "{{ luks_devices }}"
